ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "blue") +
theme(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; Slope =",signif(fit$coef[[2]], 5),
"; P =",signif(summary(fit)$coef[2,4], 5)))
}
attach(mtcars)
ggplotRegression(lm(mpg~wt))
##install.packages("ggplot2")
library(ggplot2)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "blue") +
pots(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; Slope =",signif(fit$coef[[2]], 5),
"; P =",signif(summary(fit)$coef[2,4], 5)))
}
attach(mtcars)
ggplotRegression(lm(mpg~wt))
getwd()
pdf("mypdf.pdf")
##install.packages("ggplot2")
library(ggplot2)
pdf("mypdf.pdf")
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "blue") +
opts(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; Slope =",signif(fit$coef[[2]], 5),
"; P =",signif(summary(fit)$coef[2,4], 5)))
}
attach(mtcars)
ggplotRegression(lm(mpg~wt))
##install.packages("ggplot2")
library(ggplot2)
pdf("mypdf.pdf")
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "blue") +
opts(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; Slope =",signif(fit$coef[[2]], 5),
"; P =",signif(summary(fit)$coef[2,4], 5)))
}
attach(mtcars)
ggplotRegression(lm(mpg~wt))
##install.packages("ggplot2")
library(ggplot2)
pdf("mypdf.pdf")
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "blue") +
opts(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; Slope =",signif(fit$coef[[2]], 5),
"; P =",signif(summary(fit)$coef[2,4], 5)))
}
attach(mtcars)
ggplotRegression(lm(mpg~wt))
dev.off()
##install.packages("ggplot2")
library(ggplot2)
pdf("mypdf.pdf")
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "blue") +
opts(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; Slope =",signif(fit$coef[[2]], 5),
"; P =",signif(summary(fit)$coef[2,4], 5)))
}
attach(mtcars)
ggplotRegression(lm(mpg~wt))
dev.off()
getwd()
setwd("C://Users//Admin//Dropbox//Kaggle//Titanic")
train=read.csv(file.choose())
names(train)
summary(Sex)
dim(train)
names(train)
library(glm)
library("glm")
install.packages("glm")
?glm
library("glm")
model=glm(Survived~Pclass+Fare+SibSp+Sex+Age+Pclass:Sex+Age:Sex+SibSp:Sex,train)
model=glm(Survived~Pclass+Fare+SibSp+Sex+Age+Pclass:Sex+Age:Sex+SibSp:Sex,train,
+ family=binomial(link="logit"))
+ family=binomial(link="logit"))
model=glm(Survived~Pclass+Fare+SibSp+Sex+Age+Pclass:Sex+Age:Sex+SibSp:Sex,train,
family=binomial(link="logit"))
summary(model)
plot(model)
train=read.csv(file.choose)
train=read.csv(file.choose))
train=read.csv(file.choose()))
train=read.csv(file.choose())
predict(model,train)
name(train)
names(train)
predict(model,train)
predict(model,train,type="response")
summary(train)
attach(train)
agemodel = lm(Age~ Fare+as.factor(Title)+SibSp+Parch)
agemodel
for(i in 1:nrow(train)){
if(is.na(train[i,"Age"])){
train[i,"Age"]=predict(agemodel,newdata=train[i,])
}
}
write.csv(train,"train with estimated age.csv")
edit(train)
summary(train)
names(train)
summary(train)
summary(train)
## Building the model with GLM on Test Data
model=glm(Survived~Pclass+Fare+SibSp+Sex+Age+Pclass:Sex+Age:Sex+SibSp:Sex,
train, family=binomial(link="logit"))
summary(model)
plot(model)
predict(model,train,type="response")
p=predict(model,train,type="response")
p.survive=round(p)
plot(p)
install.packages("caret")
library(caret)
names(train)
confusionMatrix(p.survive,Survived)
summary(train)
train=read.csv(file.choose())
names(train)
summary(train)
## Predicitng the data
p=predict(model,train,type="response")
## ROunding Off
p.survive=round(p)
confusionMatrix(p.survive,Survived)
install.packages("e1071")
library(e1071)
confusionMatrix(p.survive,Survived)
attach(train)
test= read.csv(file.choose())
summary(test)
rm()
rm(list=to.remove)
rm(list=ls())
test= read.csv(file.choose())
summary(test)
attach(test)
agemodel = lm(Age~ Fare+as.factor(Title)+SibSp+Parch)
train=read.csv(file.choose())
names(train)
attach(train)
## Predicting Age
agemodel = lm(Age~ Fare+as.factor(Title)+SibSp+Parch)
agemodel
for(i in 1:nrow(train)){
if(is.na(train[i,"Age"])){
train[i,"Age"]=predict(agemodel,newdata=train[i,])
}
}
write.csv(train,"train with estimated age.csv")
## Building the model with GLM on Training Data
model=glm(Survived~Pclass+Fare+SibSp+Sex+Age+Pclass:Sex+Age:Sex+SibSp:Sex,
train, family=binomial(link="logit"))
summary(model)
## Predicitng the data
p=predict(model,train,type="response")
## ROunding Off
p.survive=round(p)
confusionMatrix(p.survive,Survived)
rm(list=ls())
agemodel = lm(Age~ Fare+as.factor(Title)+SibSp+Parch)
agemodel
for(i in 1:nrow(train)){
if(is.na(train[i,"Age"])){
train[i,"Age"]=predict(agemodel,newdata=train[i,])
}
}
write.csv(train,"train with estimated age.csv")
train=read.csv(file.choose())
for(i in 1:nrow(train)){
if(is.na(train[i,"Age"])){
train[i,"Age"]=predict(agemodel,newdata=train[i,])
}
}
write.csv(train,"train with estimated age.csv")
names(train)
names(train)
attach(train)
Age
agemodel = lm(Age~ Fare+as.factor(Title)+SibSp+Parch)
agemodel
for(i in 1:nrow(train)){
if(is.na(train[i,"Age"])){
train[i,"Age"]=predict(agemodel,newdata=train[i,])
}
}
Title
names(train)
rm(list=ls())
Title
Title
rm(list=ls())
Title
## Predicting Age
ls
ls()
train=read.csv(file.choose())
names(train)
attach(train)
Title
## Predicting Age
agemodel = lm(Age~ Fare+as.factor(Title)+SibSp+Parch)
agemodel
for(i in 1:nrow(train)){
if(is.na(train[i,"Age"])){
train[i,"Age"]=predict(agemodel,newdata=train[i,])
}
}
write.csv(train,"train with estimated age.csv")
write.csv(train,"train_lm_Age.csv")
model=glm(Survived~Pclass+Fare+SibSp+Sex+Age+Pclass:Sex+Age:Sex+SibSp:Sex,
train, family=binomial(link="logit"))
summary(model)
## Predicitng the data
p=predict(model,train,type="response")
## ROunding Off
p.survive=round(p)
confusionMatrix(p.survive,Survived)
p.survive
confusionMatrix(p.survive,Survived)
test= read.csv(file.choose())
summary(test)
for(i in 1:nrow(test)){
if(is.na(test[i,"Age"])){
test[i,"Age"]=predict(agemodel,newdata=test[i,])
}
}
test= read.csv(file.choose())
summary(test)
attach(test)
for(i in 1:nrow(test)){
if(is.na(test[i,"Age"])){
test[i,"Age"]=predict(agemodel,newdata=test[i,])
}
}
summary(test)
summary(Fare)
is.na(Fare)
Fare[153]
mean(test$Fare)
mean(test$Fare,na.rm="T")
?mean
names(test)
Pclass
mean(test$Fare,subset(Pclass==3),na.rm="T")
mean(test$Fare,subset(test$Fare,Pclass==3),na.rm="T")
mean(test,subset(test$Fare,Pclass==3),na.rm="T")
mean(with(test,subset(test$Fare,Pclass==3),na.rm="T"))
mean(with(test,subset(test$Fare,Pclass==3),na.rm="TRUE"))
mean(with(test,subset(test$Fare,Pclass==3),na.rm="TRUE"))
mean(with(test$Fare,na.rm="TRUE"))
names(test)
test= read.csv(file.choose())
summary(test)
attach(test)
for(i in 1:nrow(test)){
if(is.na(test[i,"Age"])){
test[i,"Age"]=predict(agemodel,newdata=test[i,])
}
}
names(test)
summary(test)
mean(with(test$Fare,na.rm="TRUE"))
mean(test$Fare,na.rm="TRUE")
Pclass==3
class3=subset(test,Pclass==3)
class3
class3_mean=mean(class3$Fare)
class3_mean
class3_mean=mean(class3$Fare,na.rm="TRUE")
class3_mean
test$Fare[153]=class3_mean
summary(test)
model=glm(Survived~Pclass+Fare+SibSp+Sex+Age+Pclass:Sex+Age:Sex+SibSp:Sex,
train, family=binomial(link="logit"))
summary(model)
p.survive.test=round(predict(model,test,type="response"))
p.survive.test
test
names(test)
submission=data.frame(PassengerId,p.survive.test)
submission
write.csv(submission,"RegressionModel.csv")
confusionMatrix(p.survive,Survived)
confusionMatrix(p.survive,Survived)
train1=read.csv(file.choose())
names(train1)
summary(train1)
train1$Age[is.na(train1$Age)]
train1$Age[is.na(train1$Age)]=median(train1$Age[is.na(train1$Age)])
summary(train1)
train1$Age[is.na(train1$Age)]=median(train1$Age[!is.na(train1$Age)])
summary(train1)
write.csv(train1,"train_mean_Age.csv")
model=glm(Survived~Pclass+Fare+SibSp+Sex+Age+Pclass:Sex+Age:Sex+SibSp:Sex,
train1, family=binomial(link="logit"))
summary(model)
model1=glm(Survived~Pclass+Fare+SibSp+Sex+Age+Pclass:Sex+Age:Sex+SibSp:Sex,
train1, family=binomial(link="logit"))
summary(model1)
## Predicitng the data
p1=predict(model1,train,type="response")
## ROunding Off
p1.survive=round(p1)
confusionMatrix(p1.survive,Survived)
library("randomForest")
install.packages("randomForest")
train_titanic = read.csv(file.choose())
names(train_titanic)
summary(train_titanic)
train_titanic$Age[is.na(train_titanic$Age)]=median(train_titanic$Age[!is.na(train_titanic$Age)])
summary(train_titanic)
names(train_titanic)
library("randomForest")
?randomForest
model_rf=randomForest(train_titanic,train_titanic$Survived)
names(train_titanic)
model_rf=randomForest(train_titanic[,-c(4)],train_titanic$Survived)
model_rf=randomForest(train_titanic[,-c(4,9,11)],train_titanic$Survived)
model_rf=randomForest(train_titanic[,-c(4,9,11,12)],train_titanic$Survived)
model_rf=randomForest(train_titanic[,-c(1:12)],train_titanic$Survived)
model_rf=randomForest(train_titanic[,-c(3:12)],train_titanic$Survived)
model_rf=randomForest(train_titanic[,-c(2:12)],train_titanic$Survived)
model_rf=randomForest(train_titanic[,-c(4,9,11)],train_titanic$Survived)
model_rf
names(train_titanic)
model_rf=randomForest(train_titanic[,-c(Name,9,11)],train_titanic$Survived)
-c(train_titanic$Name,train_titanic$Ticket,train_titanic$Cabin)],
model_rf=randomForest(train_titanic[,
-c(train_titanic$Name,train_titanic$Ticket,train_titanic$Cabin)],
train_titanic$Survived)
names(train_titanic)
model_rf=randomForest(train_titanic[,-c(4,9,11)],train_titanic$Survived)
model_rf
?randomForest
?plot(model_rf)
plot(model_rf)
getTree(model_rf)
varImpPlot(model_rf)
names(train_titanic)
model_rf=randomForest(train_titanic[,-c(4,9,11,2)],train_titanic$Survived)
varImpPlot(model_rf)
train_titanic = read.csv(file.choose())
names(train_titanic)
summary(train_titanic)
model_rf=randomForest(train_titanic[,-c(4,9,11,2)],train_titanic$Survived)
varImpPlot(model_rf)
train_titanic = read.csv(file.choose())
names(train_titanic)
summary(train_titanic)
model_rf=randomForest(train_titanic[,-c(4,9,11,2)],train_titanic$Survived)
varImpPlot(model_rf)
names(train_titanic)
importance(model_rf)
?importance
importance(model_rf,type=1)
importance(model_rf,type=3)
importance(model_rf,type=2)
rf_predict=predict(model_rf,train_titanic)
confusionMatrix(rf_predict,train_titanic$Survived)
rf_predict
confusionMatrix(round(rf_predict),train_titanic$Survived)
titain_test = read.csv(file.choose())
names(titain_test)
summary(titain_test)
class3=subset(titain_test,Pclass==3)
## Talking the mean of 3rd Class
class3_mean=mean(class3$Fare,na.rm="TRUE")
class3_mean
titain_test$Fare[153]=class3_mean
summary(titain_test)
for(i in 1:nrow(titain_test)){
if(is.na(titain_test[i,"Age"])){
titain_test[i,"Age"]=predict(agemodel,newdata=titain_test[i,])
}
}
summary(titain_test)
p.survive.test=round(predict(model_rf,titain_test,type="response"))
options(error=traceback)
traceback()
p1.survive.test=round(predict(model_rf,titain_test,type="response"))
Survived=p.survive.test
p1.survive.test=round(predict(model_rf,titain_test,type="response"))
summary(train_titanic)
names(train_titanic)
model_rf=randomForest(train_titanic[,-c(4,9,11,2)],train_titanic$Survived)
p1.survive.test=round(predict(model_rf,titain_test,type="response"))
model2 <- randomForest(Survived ~ Sex + Pclass + Age + Fare , data = train_titanic, ntree = 5000, importance = TRUE)
varImpPlot(model2)
p1.survive.test=round(predict(model2,titain_test,type="response"))
rf_predict2=predict(model2,train_titanic)
confusionMatrix(round(rf_predict2),train_titanic$Survived)
p1.survive.test=round(predict(model2,titain_test,type="response"))
Survived=p1.survive.test
## Writing the Output to a File
submission=data.frame(PassengerId,Survived)
submission
write.csv(submission,"RF.csv")
varImpPlot(model_rf)
model2 <- randomForest(Survived ~ Title +Sex  + Pclass + Age + Fare , data = train_titanic, ntree = 5000, importance = TRUE)
varImpPlot(model2)
rf_predict2=predict(model2,train_titanic)
confusionMatrix(round(rf_predict2),train_titanic$Survived)
varImpPlot(model_rf)
model2 <- randomForest(Survived ~ Title +Sex   + Age + Fare , data = train_titanic, ntree = 5000, importance = TRUE)
varImpPlot(model2)
rf_predict2=predict(model2,train_titanic)
confusionMatrix(round(rf_predict2),train_titanic$Survived)
model2 <- randomForest(Survived ~  Pclass + Age + Fare , data = train_titanic, ntree = 5000, importance = TRUE)
varImpPlot(model2)
rf_predict2=predict(model2,train_titanic)
confusionMatrix(round(rf_predict2),train_titanic$Survived)
varImpPlot(model_rf)
model2 <- randomForest(Survived ~  Title + Fare + Age + Sex + Pclass , data = train_titanic, ntree = 5000, importance = TRUE)
rf_predict2=predict(model2,train_titanic)
confusionMatrix(round(rf_predict2),train_titanic$Survived)
model2 <- randomForest(Survived ~  Title + Fare + Age  + Pclass , data = train_titanic, ntree = 5000, importance = TRUE)
rf_predict2=predict(model2,train_titanic)
confusionMatrix(round(rf_predict2),train_titanic$Survived)
p1.survive.test=round(predict(model2,titain_test,type="response"))
Survived=p1.survive.test
## Writing the Output to a File
submission=data.frame(PassengerId,Survived)
submission
write.csv(submission,"RF.csv")
?write.csv
write.csv(submission,"RF.csv",row.names = FALSE)
model2 <- randomForest(Survived ~  Title + Fare + Age  + Pclass , data = train_titanic, ntree = 5000, importance = TRUE)
rf_predict2=predict(model2,train_titanic)
confusionMatrix(round(rf_predict2),train_titanic$Survived)
p1.survive.test=round(predict(model2,titain_test,type="response"))
Survived=p1.survive.test
model2 <- randomForest(Survived ~  Title + Fare + Sex  + Pclass , data = train_titanic, ntree = 5000, importance = TRUE)
rf_predict2=predict(model2,train_titanic)
confusionMatrix(round(rf_predict2),train_titanic$Survived)
model2 <- randomForest(Survived ~  Title + Fare + Age  + Pclass , data = train_titanic, ntree = 5000, importance = TRUE)
rf_predict2=predict(model2,train_titanic)
confusionMatrix(round(rf_predict2),train_titanic$Survived)
model2 <- randomForest(Survived ~  Title + Fare + Age   , data = train_titanic, ntree = 5000, importance = TRUE)
rf_predict2=predict(model2,train_titanic)
confusionMatrix(round(rf_predict2),train_titanic$Survived)
p1.survive.test=round(predict(model2,titain_test,type="response"))
p1.survive.test=round(predict(model2,titain_test,type="response"))
model2 <- randomForest(Survived ~ Sex + Pclass + Age + Fare , data = train_titanic, ntree = 5000, importance = TRUE)
rf_predict2=predict(model2,train_titanic)
confusionMatrix(round(rf_predict),train_titanic$Survived)
p1.survive.test=round(predict(model2,titain_test,type="response"))
Survived=p1.survive.test
submission=data.frame(PassengerId,Survived)
write.csv(submission,"RF.csv",row.names = FALSE)
varImpPlot(model_rf)
model2 <- randomForest(Survived ~ Fare + Pclass + Age + Sex , data = train_titanic, ntree = 5000, importance = TRUE)
rf_predict2=predict(model2,train_titanic)
confusionMatrix(round(rf_predict),train_titanic$Survived)
model2 <- randomForest(Survived ~ Fare + Pclass + Age + Sex + SibSp , data = train_titanic, ntree = 5000, importance = TRUE)
rf_predict2=predict(model2,train_titanic)
confusionMatrix(round(rf_predict),train_titanic$Survived)
model2 <- randomForest(Survived ~ Fare + Pclass + Age + Sex + SibSp +Embarked , data = train_titanic, ntree = 5000, importance = TRUE)
rf_predict2=predict(model2,train_titanic)
confusionMatrix(round(rf_predict),train_titanic$Survived)
model2 <- randomForest(Survived ~ Fare + Pclass + Age + Sex + SibSp +Parch , data = train_titanic, ntree = 5000, importance = TRUE)
rf_predict2=predict(model2,train_titanic)
confusionMatrix(round(rf_predict),train_titanic$Survived)
model2 <- randomForest(Survived ~ Fare + Pclass + Age + Sex + SibSp +Title , data = train_titanic, ntree = 5000, importance = TRUE)
rf_predict2=predict(model2,train_titanic)
confusionMatrix(round(rf_predict),train_titanic$Survived)
model2 <- randomForest(Survived ~ Title + Pclass + Age + Sex , data = train_titanic, ntree = 5000, importance = TRUE)
rf_predict2=predict(model2,train_titanic)
confusionMatrix(round(rf_predict),train_titanic$Survived)
model2 <- randomForest(Survived ~ Title + Fare , data = train_titanic, ntree = 5000, importance = TRUE)
rf_predict2=predict(model2,train_titanic)
confusionMatrix(round(rf_predict),train_titanic$Survived)
model2 <- randomForest(Survived ~ Fare + Sex, data = train_titanic, ntree = 5000, importance = TRUE)
rf_predict2=predict(model2,train_titanic)
confusionMatrix(round(rf_predict),train_titanic$Survived)
p1.survive.test=round(predict(model2,titain_test,type="response"))
Survived=p1.survive.test
## Writing the Output to a File
submission=data.frame(PassengerId,Survived)
submission
write.csv(submission,"RF.csv",row.names = FALSE)
